version: '3.8'

services:
  # Main Survey Automation Application
  survey-automation:
    build: .
    container_name: survey-automation
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://survey_user:survey_pass@postgres:5432/survey_automation
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CAPTCHA_API_KEY=${CAPTCHA_API_KEY}
      - MAX_CONCURRENT_TASKS=5
      - BROWSER_HEADLESS=true
      - PROXY_ROTATION_ENABLED=false
      - FLASK_ENV=production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - survey-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: survey-postgres
    environment:
      - POSTGRES_DB=survey_automation
      - POSTGRES_USER=survey_user
      - POSTGRES_PASSWORD=survey_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - survey-network

  # Redis for Caching and Task Queue
  redis:
    image: redis:7-alpine
    container_name: survey-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - survey-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: survey-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - survey-automation
    restart: unless-stopped
    networks:
      - survey-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: survey-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - survey-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: survey-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - survey-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: survey-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - survey-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: survey-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - survey-network

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: survey-logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - survey-network

  # Portainer for Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: survey-portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    networks:
      - survey-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  portainer_data:

networks:
  survey-network:
    driver: bridge